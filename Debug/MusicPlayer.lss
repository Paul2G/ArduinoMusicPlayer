
MusicPlayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000de8  00800200  00000ad2  00000b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800fe8  00800fe8  0000194e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199c  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef8  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c8  00000000  00000000  0000431c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00004ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000751  00000000  00000000  00004f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d3  00000000  00000000  00005689  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00005d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	00 00       	nop
   4:	c0 c0       	rjmp	.+384    	; 0x186 <__bad_interrupt>
   6:	00 00       	nop
   8:	be c0       	rjmp	.+380    	; 0x186 <__bad_interrupt>
   a:	00 00       	nop
   c:	bc c0       	rjmp	.+376    	; 0x186 <__bad_interrupt>
   e:	00 00       	nop
  10:	ba c0       	rjmp	.+372    	; 0x186 <__bad_interrupt>
  12:	00 00       	nop
  14:	b8 c0       	rjmp	.+368    	; 0x186 <__bad_interrupt>
  16:	00 00       	nop
  18:	b6 c0       	rjmp	.+364    	; 0x186 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b4 c0       	rjmp	.+360    	; 0x186 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b2 c0       	rjmp	.+356    	; 0x186 <__bad_interrupt>
  22:	00 00       	nop
  24:	b0 c0       	rjmp	.+352    	; 0x186 <__bad_interrupt>
  26:	00 00       	nop
  28:	ae c0       	rjmp	.+348    	; 0x186 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ac c0       	rjmp	.+344    	; 0x186 <__bad_interrupt>
  2e:	00 00       	nop
  30:	aa c0       	rjmp	.+340    	; 0x186 <__bad_interrupt>
  32:	00 00       	nop
  34:	a8 c0       	rjmp	.+336    	; 0x186 <__bad_interrupt>
  36:	00 00       	nop
  38:	a6 c0       	rjmp	.+332    	; 0x186 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a4 c0       	rjmp	.+328    	; 0x186 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a2 c0       	rjmp	.+324    	; 0x186 <__bad_interrupt>
  42:	00 00       	nop
  44:	a0 c0       	rjmp	.+320    	; 0x186 <__bad_interrupt>
  46:	00 00       	nop
  48:	9e c0       	rjmp	.+316    	; 0x186 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9c c0       	rjmp	.+312    	; 0x186 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9a c0       	rjmp	.+308    	; 0x186 <__bad_interrupt>
  52:	00 00       	nop
  54:	42 c2       	rjmp	.+1156   	; 0x4da <__vector_21>
  56:	00 00       	nop
  58:	96 c0       	rjmp	.+300    	; 0x186 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	94 c0       	rjmp	.+296    	; 0x186 <__bad_interrupt>
  5e:	00 00       	nop
  60:	92 c0       	rjmp	.+292    	; 0x186 <__bad_interrupt>
  62:	00 00       	nop
  64:	90 c0       	rjmp	.+288    	; 0x186 <__bad_interrupt>
  66:	00 00       	nop
  68:	8e c0       	rjmp	.+284    	; 0x186 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8c c0       	rjmp	.+280    	; 0x186 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8a c0       	rjmp	.+276    	; 0x186 <__bad_interrupt>
  72:	00 00       	nop
  74:	88 c0       	rjmp	.+272    	; 0x186 <__bad_interrupt>
  76:	00 00       	nop
  78:	86 c0       	rjmp	.+268    	; 0x186 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	84 c0       	rjmp	.+264    	; 0x186 <__bad_interrupt>
  7e:	00 00       	nop
  80:	82 c0       	rjmp	.+260    	; 0x186 <__bad_interrupt>
  82:	00 00       	nop
  84:	80 c0       	rjmp	.+256    	; 0x186 <__bad_interrupt>
  86:	00 00       	nop
  88:	7e c0       	rjmp	.+252    	; 0x186 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7c c0       	rjmp	.+248    	; 0x186 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7a c0       	rjmp	.+244    	; 0x186 <__bad_interrupt>
  92:	00 00       	nop
  94:	78 c0       	rjmp	.+240    	; 0x186 <__bad_interrupt>
  96:	00 00       	nop
  98:	76 c0       	rjmp	.+236    	; 0x186 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	74 c0       	rjmp	.+232    	; 0x186 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	72 c0       	rjmp	.+228    	; 0x186 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	70 c0       	rjmp	.+224    	; 0x186 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	6e c0       	rjmp	.+220    	; 0x186 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	6c c0       	rjmp	.+216    	; 0x186 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	6a c0       	rjmp	.+212    	; 0x186 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	68 c0       	rjmp	.+208    	; 0x186 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	66 c0       	rjmp	.+204    	; 0x186 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	64 c0       	rjmp	.+200    	; 0x186 <__bad_interrupt>
  be:	00 00       	nop
  c0:	62 c0       	rjmp	.+196    	; 0x186 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	60 c0       	rjmp	.+192    	; 0x186 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	5e c0       	rjmp	.+188    	; 0x186 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	5c c0       	rjmp	.+184    	; 0x186 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	5a c0       	rjmp	.+180    	; 0x186 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	58 c0       	rjmp	.+176    	; 0x186 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	56 c0       	rjmp	.+172    	; 0x186 <__bad_interrupt>
  da:	00 00       	nop
  dc:	54 c0       	rjmp	.+168    	; 0x186 <__bad_interrupt>
  de:	00 00       	nop
  e0:	52 c0       	rjmp	.+164    	; 0x186 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	5d 01       	movw	r10, r26
  e6:	84 01       	movw	r16, r8
  e8:	84 01       	movw	r16, r8
  ea:	84 01       	movw	r16, r8
  ec:	84 01       	movw	r16, r8
  ee:	84 01       	movw	r16, r8
  f0:	84 01       	movw	r16, r8
  f2:	84 01       	movw	r16, r8
  f4:	84 01       	movw	r16, r8
  f6:	84 01       	movw	r16, r8
  f8:	84 01       	movw	r16, r8
  fa:	84 01       	movw	r16, r8
  fc:	34 01       	movw	r6, r8
  fe:	84 01       	movw	r16, r8
 100:	13 01       	movw	r2, r6
 102:	84 01       	movw	r16, r8
 104:	84 01       	movw	r16, r8
 106:	29 01       	movw	r4, r18
 108:	84 01       	movw	r16, r8
 10a:	84 01       	movw	r16, r8
 10c:	84 01       	movw	r16, r8
 10e:	84 01       	movw	r16, r8
 110:	84 01       	movw	r16, r8
 112:	84 01       	movw	r16, r8
 114:	84 01       	movw	r16, r8
 116:	84 01       	movw	r16, r8
 118:	84 01       	movw	r16, r8
 11a:	84 01       	movw	r16, r8
 11c:	84 01       	movw	r16, r8
 11e:	84 01       	movw	r16, r8
 120:	84 01       	movw	r16, r8
 122:	84 01       	movw	r16, r8
 124:	5d 01       	movw	r10, r26
 126:	84 01       	movw	r16, r8
 128:	84 01       	movw	r16, r8
 12a:	84 01       	movw	r16, r8
 12c:	84 01       	movw	r16, r8
 12e:	84 01       	movw	r16, r8
 130:	84 01       	movw	r16, r8
 132:	84 01       	movw	r16, r8
 134:	84 01       	movw	r16, r8
 136:	84 01       	movw	r16, r8
 138:	84 01       	movw	r16, r8
 13a:	84 01       	movw	r16, r8
 13c:	34 01       	movw	r6, r8
 13e:	84 01       	movw	r16, r8
 140:	13 01       	movw	r2, r6
 142:	84 01       	movw	r16, r8
 144:	84 01       	movw	r16, r8
 146:	29 01       	movw	r4, r18

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d1 e2       	ldi	r29, 0x21	; 33
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61
 154:	00 e0       	ldi	r16, 0x00	; 0
 156:	0c bf       	out	0x3c, r16	; 60

00000158 <__do_copy_data>:
 158:	1f e0       	ldi	r17, 0x0F	; 15
 15a:	a0 e0       	ldi	r26, 0x00	; 0
 15c:	b2 e0       	ldi	r27, 0x02	; 2
 15e:	e2 ed       	ldi	r30, 0xD2	; 210
 160:	fa e0       	ldi	r31, 0x0A	; 10
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	0b bf       	out	0x3b, r16	; 59
 166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
 168:	07 90       	elpm	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	a8 3e       	cpi	r26, 0xE8	; 232
 16e:	b1 07       	cpc	r27, r17
 170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
 172:	20 e1       	ldi	r18, 0x10	; 16
 174:	a8 ee       	ldi	r26, 0xE8	; 232
 176:	bf e0       	ldi	r27, 0x0F	; 15
 178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
 17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
 17c:	a1 32       	cpi	r26, 0x21	; 33
 17e:	b2 07       	cpc	r27, r18
 180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
 182:	02 d0       	rcall	.+4      	; 0x188 <main>
 184:	a4 c4       	rjmp	.+2376   	; 0xace <_exit>

00000186 <__bad_interrupt>:
 186:	3c cf       	rjmp	.-392    	; 0x0 <__vectors>

00000188 <main>:
#include "UART.h"
#include "Timer.h"
#include "Songs.h"

int main(void)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <main+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <main+0x8>
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	uint8_t songNum = 1;
	const char * name[] = {
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	e3 e2       	ldi	r30, 0x23	; 35
 198:	f2 e0       	ldi	r31, 0x02	; 2
 19a:	de 01       	movw	r26, r28
 19c:	11 96       	adiw	r26, 0x01	; 1
 19e:	01 90       	ld	r0, Z+
 1a0:	0d 92       	st	X+, r0
 1a2:	8a 95       	dec	r24
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x16>
		"0. Test                 ",
		"1. Kesson Dalek         ",
		"2. PKMN GSC - Surf Theme"
	};

	UART_init();
 1a6:	ac d3       	rcall	.+1880   	; 0x900 <UART_init>
	Timer0_Ini();
 1a8:	b3 d0       	rcall	.+358    	; 0x310 <Timer0_Ini>
	Channels_Ini();
 1aa:	bc d0       	rcall	.+376    	; 0x324 <Channels_Ini>
 1ac:	22 d4       	rcall	.+2116   	; 0x9f2 <UART_clrscr>

	UART_clrscr();
 1ae:	67 e0       	ldi	r22, 0x07	; 7
	UART_setText(BOLD, WHITE);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	d6 d3       	rcall	.+1964   	; 0x960 <UART_setText>
 1b4:	89 e2       	ldi	r24, 0x29	; 41
	UART_puts("Reproductor de musica");
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	c7 d3       	rcall	.+1934   	; 0x948 <UART_puts>
 1ba:	8f e3       	ldi	r24, 0x3F	; 63
	UART_puts("\n\n\r");
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	c4 d3       	rcall	.+1928   	; 0x948 <UART_puts>
 1c0:	63 e0       	ldi	r22, 0x03	; 3

	UART_setText(REGULAR, YELLOW);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	cd d3       	rcall	.+1946   	; 0x960 <UART_setText>
 1c6:	83 e4       	ldi	r24, 0x43	; 67
	UART_puts(name[songNum]);
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	be d3       	rcall	.+1916   	; 0x948 <UART_puts>
 1cc:	80 e4       	ldi	r24, 0x40	; 64
	UART_puts("\n\r");
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	bb d3       	rcall	.+1910   	; 0x948 <UART_puts>
 1d2:	61 e0       	ldi	r22, 0x01	; 1

	UART_setText(REGULAR, RED);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	c4 d3       	rcall	.+1928   	; 0x960 <UART_setText>
 1d8:	8c e5       	ldi	r24, 0x5C	; 92
	UART_puts("Detenido");
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	b5 d3       	rcall	.+1898   	; 0x948 <UART_puts>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
	UART_puts("\n\n\r");
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	b2 d3       	rcall	.+1892   	; 0x948 <UART_puts>
 1e4:	67 e0       	ldi	r22, 0x07	; 7

	UART_setText(REGULAR, WHITE);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	bb d3       	rcall	.+1910   	; 0x960 <UART_setText>
 1ea:	85 e6       	ldi	r24, 0x65	; 101
	UART_puts("P para reproducir\n\r");
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	ac d3       	rcall	.+1880   	; 0x948 <UART_puts>
	UART_puts("S para detener\n\r");
 1f0:	89 e7       	ldi	r24, 0x79	; 121
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	a9 d3       	rcall	.+1874   	; 0x948 <UART_puts>
 1f6:	8a e8       	ldi	r24, 0x8A	; 138
	UART_puts("N para siguiente\n\r");
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	a6 d3       	rcall	.+1868   	; 0x948 <UART_puts>
 1fc:	8d e9       	ldi	r24, 0x9D	; 157
 1fe:	92 e0       	ldi	r25, 0x02	; 2
	UART_puts("B para anterior");
 200:	a3 d3       	rcall	.+1862   	; 0x948 <UART_puts>
 202:	6a e0       	ldi	r22, 0x0A	; 10
 204:	80 e0       	ldi	r24, 0x00	; 0
	UART_gotoxy(0, 10);
 206:	b5 d3       	rcall	.+1898   	; 0x972 <UART_gotoxy>
 208:	11 e0       	ldi	r17, 0x01	; 1
 20a:	97 d3       	rcall	.+1838   	; 0x93a <UART_getchar>
 20c:	90 e0       	ldi	r25, 0x00	; 0
#include "Timer.h"
#include "Songs.h"

int main(void)
{
	uint8_t songNum = 1;
 20e:	fc 01       	movw	r30, r24
	UART_puts("B para anterior");
	UART_gotoxy(0, 10);

	while(1)
	{
		switch (UART_getchar())
 210:	e2 54       	subi	r30, 0x42	; 66
 212:	f1 09       	sbc	r31, r1
 214:	e2 33       	cpi	r30, 0x32	; 50
 216:	f1 05       	cpc	r31, r1
 218:	08 f0       	brcs	.+2      	; 0x21c <main+0x94>
 21a:	76 c0       	rjmp	.+236    	; 0x308 <main+0x180>
 21c:	88 27       	eor	r24, r24
 21e:	ee 58       	subi	r30, 0x8E	; 142
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	8f 4f       	sbci	r24, 0xFF	; 255
 224:	2b c4       	rjmp	.+2134   	; 0xa7c <__tablejump2__>
 226:	81 2f       	mov	r24, r17
 228:	90 e0       	ldi	r25, 0x00	; 0
		{
			case 'p':
			case 'P':
				Song_Play(songsTable[songNum]);
 22a:	9c 01       	movw	r18, r24
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	80 50       	subi	r24, 0x00	; 0
 23a:	9e 4f       	sbci	r25, 0xFE	; 254
 23c:	1c d1       	rcall	.+568    	; 0x476 <Song_Play>
				UART_gotoxy(0, 4);
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	97 d3       	rcall	.+1838   	; 0x972 <UART_gotoxy>
 244:	62 e0       	ldi	r22, 0x02	; 2
				UART_setText(REGULAR, GREEN);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	8b d3       	rcall	.+1814   	; 0x960 <UART_setText>
 24a:	8d ea       	ldi	r24, 0xAD	; 173
 24c:	92 e0       	ldi	r25, 0x02	; 2
				UART_puts("Reproduciendo...");
 24e:	7c d3       	rcall	.+1784   	; 0x948 <UART_puts>
 250:	5b c0       	rjmp	.+182    	; 0x308 <main+0x180>
 252:	2f d1       	rcall	.+606    	; 0x4b2 <Song_Stop>
 254:	64 e0       	ldi	r22, 0x04	; 4
				break;
 256:	80 e0       	ldi	r24, 0x00	; 0
			case 's':
			case 'S':
				Song_Stop();
 258:	8c d3       	rcall	.+1816   	; 0x972 <UART_gotoxy>
				UART_gotoxy(0, 4);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	80 d3       	rcall	.+1792   	; 0x960 <UART_setText>
				UART_setText(REGULAR, RED);
 260:	8e eb       	ldi	r24, 0xBE	; 190
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	71 d3       	rcall	.+1762   	; 0x948 <UART_puts>
				UART_puts("Detenido         ");
 266:	50 c0       	rjmp	.+160    	; 0x308 <main+0x180>
 268:	12 30       	cpi	r17, 0x02	; 2
 26a:	09 f4       	brne	.+2      	; 0x26e <main+0xe6>
 26c:	4d c0       	rjmp	.+154    	; 0x308 <main+0x180>
				break;
 26e:	1f 5f       	subi	r17, 0xFF	; 255
			case 'n':
			case 'N':
				if(songNum != 2){
 270:	81 2f       	mov	r24, r17
 272:	90 e0       	ldi	r25, 0x00	; 0
					songNum++;
 274:	7c 01       	movw	r14, r24
					Song_Play(songsTable[songNum]);
 276:	ee 0c       	add	r14, r14
 278:	ff 1c       	adc	r15, r15
 27a:	8e 0d       	add	r24, r14
 27c:	9f 1d       	adc	r25, r15
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	80 50       	subi	r24, 0x00	; 0
 284:	9e 4f       	sbci	r25, 0xFE	; 254
 286:	f7 d0       	rcall	.+494    	; 0x476 <Song_Play>
 288:	63 e0       	ldi	r22, 0x03	; 3
					UART_gotoxy(0, 3);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	72 d3       	rcall	.+1764   	; 0x972 <UART_gotoxy>
 28e:	63 e0       	ldi	r22, 0x03	; 3
 290:	80 e0       	ldi	r24, 0x00	; 0
					UART_setText(REGULAR, YELLOW);
 292:	66 d3       	rcall	.+1740   	; 0x960 <UART_setText>
 294:	e1 e0       	ldi	r30, 0x01	; 1
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ec 0f       	add	r30, r28
					UART_puts(name[songNum]);
 29a:	fd 1f       	adc	r31, r29
 29c:	ee 0d       	add	r30, r14
 29e:	ff 1d       	adc	r31, r15
 2a0:	80 81       	ld	r24, Z
 2a2:	91 81       	ldd	r25, Z+1	; 0x01
 2a4:	51 d3       	rcall	.+1698   	; 0x948 <UART_puts>
 2a6:	64 e0       	ldi	r22, 0x04	; 4
					UART_gotoxy(0, 4);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	63 d3       	rcall	.+1734   	; 0x972 <UART_gotoxy>
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	80 e0       	ldi	r24, 0x00	; 0
					UART_setText(REGULAR, GREEN);
 2b0:	57 d3       	rcall	.+1710   	; 0x960 <UART_setText>
 2b2:	8d ea       	ldi	r24, 0xAD	; 173
 2b4:	92 e0       	ldi	r25, 0x02	; 2
					UART_puts("Reproduciendo...");
 2b6:	48 d3       	rcall	.+1680   	; 0x948 <UART_puts>
 2b8:	27 c0       	rjmp	.+78     	; 0x308 <main+0x180>
 2ba:	11 23       	and	r17, r17
 2bc:	29 f1       	breq	.+74     	; 0x308 <main+0x180>
				}
				break;
			case 'b':
			case 'B':
				if(songNum != 0){
 2be:	11 50       	subi	r17, 0x01	; 1
 2c0:	81 2f       	mov	r24, r17
					songNum--;
					Song_Play(songsTable[songNum]);
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	7c 01       	movw	r14, r24
 2c6:	ee 0c       	add	r14, r14
 2c8:	ff 1c       	adc	r15, r15
 2ca:	8e 0d       	add	r24, r14
 2cc:	9f 1d       	adc	r25, r15
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	80 50       	subi	r24, 0x00	; 0
 2d4:	9e 4f       	sbci	r25, 0xFE	; 254
 2d6:	cf d0       	rcall	.+414    	; 0x476 <Song_Play>
 2d8:	63 e0       	ldi	r22, 0x03	; 3
					UART_gotoxy(0, 3);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	4a d3       	rcall	.+1684   	; 0x972 <UART_gotoxy>
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	80 e0       	ldi	r24, 0x00	; 0
					UART_setText(REGULAR, YELLOW);
 2e2:	3e d3       	rcall	.+1660   	; 0x960 <UART_setText>
 2e4:	e1 e0       	ldi	r30, 0x01	; 1
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	ec 0f       	add	r30, r28
					UART_puts(name[songNum]);
 2ea:	fd 1f       	adc	r31, r29
 2ec:	ee 0d       	add	r30, r14
 2ee:	ff 1d       	adc	r31, r15
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	29 d3       	rcall	.+1618   	; 0x948 <UART_puts>
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	3b d3       	rcall	.+1654   	; 0x972 <UART_gotoxy>
 2fc:	62 e0       	ldi	r22, 0x02	; 2
					UART_gotoxy(0, 4);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	2f d3       	rcall	.+1630   	; 0x960 <UART_setText>
 302:	8d ea       	ldi	r24, 0xAD	; 173
 304:	92 e0       	ldi	r25, 0x02	; 2
					UART_setText(REGULAR, GREEN);
 306:	20 d3       	rcall	.+1600   	; 0x948 <UART_puts>
 308:	6a e0       	ldi	r22, 0x0A	; 10
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	32 d3       	rcall	.+1636   	; 0x972 <UART_gotoxy>
					UART_puts("Reproduciendo...");
 30e:	7d cf       	rjmp	.-262    	; 0x20a <main+0x82>

00000310 <Timer0_Ini>:

static uint8_t *timerX;

void Timer0_Ini ( void ){
	//CTC, OC0A toggle on compare
	TCCR0A = (1<<COM0A0) | (2<<WGM00);
 310:	82 e4       	ldi	r24, 0x42	; 66
 312:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (3<<CS00); // clk/64
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	85 bd       	out	0x25, r24	; 37

	//Todo apagado
	TIMSK0 = 0x00;
 318:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>

	//Cada 250 tiempos sucede un millisegundo
	OCR0A = 250 - 1;
 31c:	89 ef       	ldi	r24, 0xF9	; 249
 31e:	87 bd       	out	0x27, r24	; 39

    sei(); /* habilita interrupciones (global) */
 320:	78 94       	sei
 322:	08 95       	ret

00000324 <Channels_Ini>:
}

void Channels_Ini(){
	/* TIMER 1 */ {
		//Fast PWM ancho de pulso 50% por defecto
		TCCR1A = (3<<WGM10);
 324:	33 e0       	ldi	r19, 0x03	; 3
 326:	30 93 80 00 	sts	0x0080, r19	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		TCCR1B = (3<<WGM12);
 32a:	e1 e8       	ldi	r30, 0x81	; 129
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	28 e1       	ldi	r18, 0x18	; 24
 330:	20 83       	st	Z, r18

		//Presscalador 8
		TCCR1B |= (2<<CS10);
 332:	80 81       	ld	r24, Z
 334:	82 60       	ori	r24, 0x02	; 2
 336:	80 83       	st	Z, r24

		// Nota base C4
		OCR1A = TICKS(Cn4); 
 338:	e8 e8       	ldi	r30, 0x88	; 136
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	81 ed       	ldi	r24, 0xD1	; 209
 33e:	9d e1       	ldi	r25, 0x1D	; 29
 340:	91 83       	std	Z+1, r25	; 0x01
 342:	80 83       	st	Z, r24
		OCR1B = OCR1A / 2;
 344:	40 81       	ld	r20, Z
 346:	51 81       	ldd	r21, Z+1	; 0x01
 348:	56 95       	lsr	r21
 34a:	47 95       	ror	r20
 34c:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 350:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>

		// Activando el salida del PWM
		DDRB |= (1<<PB6);
 354:	44 b1       	in	r20, 0x04	; 4
 356:	40 64       	ori	r20, 0x40	; 64
 358:	44 b9       	out	0x04, r20	; 4
	}

	/* TIMER 3 */ {
		//Fast PWM ancho de pulso 50% por defecto
		TCCR3A = (3<<WGM30);
 35a:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		TCCR3B = (3<<WGM32);
 35e:	e1 e9       	ldi	r30, 0x91	; 145
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	20 83       	st	Z, r18

		//Presscalador 8
		TCCR3B |= (2<<CS30);
 364:	40 81       	ld	r20, Z
 366:	42 60       	ori	r20, 0x02	; 2
 368:	40 83       	st	Z, r20

		// Nota base C4
		OCR3A = TICKS(Cn4); 
 36a:	e8 e9       	ldi	r30, 0x98	; 152
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
		OCR3B = OCR3A / 2;
 372:	40 81       	ld	r20, Z
 374:	51 81       	ldd	r21, Z+1	; 0x01
 376:	56 95       	lsr	r21
 378:	47 95       	ror	r20
 37a:	50 93 9b 00 	sts	0x009B, r21	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 37e:	40 93 9a 00 	sts	0x009A, r20	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>

		// Activando el salida del PWM
		DDRE |= (1<<PE4);
 382:	4d b1       	in	r20, 0x0d	; 13
 384:	40 61       	ori	r20, 0x10	; 16
 386:	4d b9       	out	0x0d, r20	; 13
	}
	
	/* TIMER 4 */ {
		//Fast PWM ancho de pulso 50% por defecto
		TCCR4A = (3<<WGM40);
 388:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		TCCR4B = (3<<WGM42);
 38c:	e1 ea       	ldi	r30, 0xA1	; 161
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	20 83       	st	Z, r18

		//Presscalador 8
		TCCR4B |= (2<<CS40);
 392:	20 81       	ld	r18, Z
 394:	22 60       	ori	r18, 0x02	; 2
 396:	20 83       	st	Z, r18

		// Nota base C4
		OCR4A = TICKS(Cn4);
 398:	e8 ea       	ldi	r30, 0xA8	; 168
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	80 83       	st	Z, r24
		OCR4B = OCR4A / 2;
 3a0:	80 81       	ld	r24, Z
 3a2:	91 81       	ldd	r25, Z+1	; 0x01
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
 3ac:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>

		// Activando el salida del PWM
		DDRH |= (1<<PH4);
 3b0:	e1 e0       	ldi	r30, 0x01	; 1
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	80 81       	ld	r24, Z
 3b6:	80 61       	ori	r24, 0x10	; 16
 3b8:	80 83       	st	Z, r24
 3ba:	08 95       	ret

000003bc <Channel_Freq_Gen>:
	}
}

void Channel_Freq_Gen(uint8_t channel, uint16_t freq){
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
	timerX = timerOffset(channel);
 3c0:	88 23       	and	r24, r24
 3c2:	29 f0       	breq	.+10     	; 0x3ce <Channel_Freq_Gen+0x12>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <Channel_Freq_Gen+0x18>
 3c8:	c0 e9       	ldi	r28, 0x90	; 144
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <Channel_Freq_Gen+0x1c>
 3ce:	c0 e8       	ldi	r28, 0x80	; 128
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <Channel_Freq_Gen+0x1c>
 3d4:	c0 ea       	ldi	r28, 0xA0	; 160
 3d6:	d0 e0       	ldi	r29, 0x00	; 0

	if(freq){
 3d8:	61 15       	cp	r22, r1
 3da:	71 05       	cpc	r23, r1
 3dc:	d1 f0       	breq	.+52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		OCRxA = TICKS(freq); 
 3de:	49 f0       	breq	.+18     	; 0x3f2 <Channel_Freq_Gen+0x36>
 3e0:	9b 01       	movw	r18, r22
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	60 e8       	ldi	r22, 0x80	; 128
 3e8:	74 e8       	ldi	r23, 0x84	; 132
 3ea:	8e e1       	ldi	r24, 0x1E	; 30
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	2a d3       	rcall	.+1620   	; 0xa44 <__divmodsi4>
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <Channel_Freq_Gen+0x3a>
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	39 87       	std	Y+9, r19	; 0x09
 3f8:	28 87       	std	Y+8, r18	; 0x08
		OCRxB = OCRxA / 2;
 3fa:	88 85       	ldd	r24, Y+8	; 0x08
 3fc:	99 85       	ldd	r25, Y+9	; 0x09
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	9b 87       	std	Y+11, r25	; 0x0b
 404:	8a 87       	std	Y+10, r24	; 0x0a
		TCNTx = 0x0000;
 406:	1d 82       	std	Y+5, r1	; 0x05
 408:	1c 82       	std	Y+4, r1	; 0x04

		TCCRxA |= (2<<COM1B0);
 40a:	88 81       	ld	r24, Y
 40c:	80 62       	ori	r24, 0x20	; 32
 40e:	88 83       	st	Y, r24
 410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	} else {
		//Desactivando salida
		TCCRxA &= ~(3<<COM1B0);
 412:	88 81       	ld	r24, Y
 414:	8f 7c       	andi	r24, 0xCF	; 207
 416:	88 83       	st	Y, r24
	}
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <Channel_Play>:

void Channel_Play(uint8_t channel, const note * song, uint16_t len)
{
	songToPlay[channel] = ( note *) song;
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9c 01       	movw	r18, r24
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	f9 01       	movw	r30, r18
 428:	e0 50       	subi	r30, 0x00	; 0
 42a:	f0 4f       	sbci	r31, 0xF0	; 240
 42c:	71 83       	std	Z+1, r23	; 0x01
 42e:	60 83       	st	Z, r22
	lenOfSong[channel] = len;
 430:	f9 01       	movw	r30, r18
 432:	e6 50       	subi	r30, 0x06	; 6
 434:	f0 4f       	sbci	r31, 0xF0	; 240
 436:	51 83       	std	Z+1, r21	; 0x01
 438:	40 83       	st	Z, r20
	nNid[channel] = 1;
 43a:	f9 01       	movw	r30, r18
 43c:	ec 50       	subi	r30, 0x0C	; 12
 43e:	f0 4f       	sbci	r31, 0xF0	; 240
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	51 83       	std	Z+1, r21	; 0x01
 446:	40 83       	st	Z, r20
	mSecCnt[channel] = 1;
 448:	fc 01       	movw	r30, r24
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	ea 5f       	subi	r30, 0xFA	; 250
 458:	ff 4e       	sbci	r31, 0xEF	; 239
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	20 83       	st	Z, r18
 45e:	11 82       	std	Z+1, r1	; 0x01
 460:	12 82       	std	Z+2, r1	; 0x02
 462:	13 82       	std	Z+3, r1	; 0x03
 464:	14 82       	std	Z+4, r1	; 0x04
 466:	15 82       	std	Z+5, r1	; 0x05
 468:	16 82       	std	Z+6, r1	; 0x06
 46a:	17 82       	std	Z+7, r1	; 0x07
	playing[channel] = 1;
 46c:	fc 01       	movw	r30, r24
 46e:	e2 5e       	subi	r30, 0xE2	; 226
 470:	ff 4e       	sbci	r31, 0xEF	; 239
 472:	20 83       	st	Z, r18
 474:	08 95       	ret

00000476 <Song_Play>:
}

void Song_Play(const note * song[]){
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
	Channel_Play(R, song[R], song[R][0].freq);
 47c:	68 81       	ld	r22, Y
 47e:	79 81       	ldd	r23, Y+1	; 0x01
 480:	fb 01       	movw	r30, r22
 482:	40 81       	ld	r20, Z
 484:	51 81       	ldd	r21, Z+1	; 0x01
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	ca df       	rcall	.-108    	; 0x41e <Channel_Play>
	Channel_Play(L, song[L], song[L][0].freq);
 48a:	6a 81       	ldd	r22, Y+2	; 0x02
 48c:	7b 81       	ldd	r23, Y+3	; 0x03
 48e:	fb 01       	movw	r30, r22
 490:	40 81       	ld	r20, Z
 492:	51 81       	ldd	r21, Z+1	; 0x01
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	c3 df       	rcall	.-122    	; 0x41e <Channel_Play>
	Channel_Play(C, song[C], song[C][0].freq);
 498:	6c 81       	ldd	r22, Y+4	; 0x04
 49a:	7d 81       	ldd	r23, Y+5	; 0x05
 49c:	fb 01       	movw	r30, r22
 49e:	40 81       	ld	r20, Z
 4a0:	51 81       	ldd	r21, Z+1	; 0x01
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	bc df       	rcall	.-136    	; 0x41e <Channel_Play>

	TIMSK0 = (1<<OCIE0A);
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <Song_Stop>:

void Song_Stop(){
	playing[R] = 0x00;
 4b2:	ee e1       	ldi	r30, 0x1E	; 30
 4b4:	f0 e1       	ldi	r31, 0x10	; 16
 4b6:	10 82       	st	Z, r1
	playing[L] = 0x00;
 4b8:	11 82       	std	Z+1, r1	; 0x01
	playing[C] = 0x00;
 4ba:	12 82       	std	Z+2, r1	; 0x02
	Channel_Freq_Gen(R, S__);
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	7c df       	rcall	.-264    	; 0x3bc <Channel_Freq_Gen>
	Channel_Freq_Gen(L, S__);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	78 df       	rcall	.-272    	; 0x3bc <Channel_Freq_Gen>
	Channel_Freq_Gen(C, S__);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	74 df       	rcall	.-280    	; 0x3bc <Channel_Freq_Gen>

	TIMSK0 = 0x00;
 4d4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 4d8:	08 95       	ret

000004da <__vector_21>:
}

ISR(TIMER0_COMPA_vect){ 
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	0b b6       	in	r0, 0x3b	; 59
 4e6:	0f 92       	push	r0
 4e8:	2f 92       	push	r2
 4ea:	3f 92       	push	r3
 4ec:	4f 92       	push	r4
 4ee:	5f 92       	push	r5
 4f0:	6f 92       	push	r6
 4f2:	7f 92       	push	r7
 4f4:	8f 92       	push	r8
 4f6:	9f 92       	push	r9
 4f8:	af 92       	push	r10
 4fa:	bf 92       	push	r11
 4fc:	cf 92       	push	r12
 4fe:	df 92       	push	r13
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
	static note noteNow[3];

	/* 	LADO DERECHO   */
	if (playing[R]) {
 524:	80 91 1e 10 	lds	r24, 0x101E	; 0x80101e <playing>
 528:	88 23       	and	r24, r24
 52a:	09 f4       	brne	.+2      	; 0x52e <__vector_21+0x54>
 52c:	90 c0       	rjmp	.+288    	; 0x64e <__vector_21+0x174>
		if( nNid[R] < lenOfSong[R]){
 52e:	c0 91 f4 0f 	lds	r28, 0x0FF4	; 0x800ff4 <nNid>
 532:	d0 91 f5 0f 	lds	r29, 0x0FF5	; 0x800ff5 <nNid+0x1>
 536:	80 91 fa 0f 	lds	r24, 0x0FFA	; 0x800ffa <lenOfSong>
 53a:	90 91 fb 0f 	lds	r25, 0x0FFB	; 0x800ffb <lenOfSong+0x1>
 53e:	c8 17       	cp	r28, r24
 540:	d9 07       	cpc	r29, r25
 542:	08 f0       	brcs	.+2      	; 0x546 <__vector_21+0x6c>
 544:	7b c0       	rjmp	.+246    	; 0x63c <__vector_21+0x162>
			if(mSecCnt[R] == 1){
 546:	e6 e0       	ldi	r30, 0x06	; 6
 548:	f0 e1       	ldi	r31, 0x10	; 16
 54a:	20 81       	ld	r18, Z
 54c:	31 81       	ldd	r19, Z+1	; 0x01
 54e:	42 81       	ldd	r20, Z+2	; 0x02
 550:	53 81       	ldd	r21, Z+3	; 0x03
 552:	64 81       	ldd	r22, Z+4	; 0x04
 554:	75 81       	ldd	r23, Z+5	; 0x05
 556:	86 81       	ldd	r24, Z+6	; 0x06
 558:	97 81       	ldd	r25, Z+7	; 0x07
 55a:	a1 e0       	ldi	r26, 0x01	; 1
 55c:	ac d2       	rcall	.+1368   	; 0xab6 <__cmpdi2_s8>
 55e:	b9 f4       	brne	.+46     	; 0x58e <__vector_21+0xb4>
				//noteNow[R].delay = pgm_read_word(&songToPlay[R][nNid[R]].delay);
				//noteNow[R].freq = pgm_read_word(&songToPlay[R][nNid[R]].freq);
				noteNow[R].delay = songToPlay[R][nNid[R]].delay;
 560:	80 91 00 10 	lds	r24, 0x1000	; 0x801000 <songToPlay>
 564:	90 91 01 10 	lds	r25, 0x1001	; 0x801001 <songToPlay+0x1>
 568:	cc 0f       	add	r28, r28
 56a:	dd 1f       	adc	r29, r29
 56c:	cc 0f       	add	r28, r28
 56e:	dd 1f       	adc	r29, r29
 570:	c8 0f       	add	r28, r24
 572:	d9 1f       	adc	r29, r25
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	9b 81       	ldd	r25, Y+3	; 0x03
 578:	e8 ee       	ldi	r30, 0xE8	; 232
 57a:	ff e0       	ldi	r31, 0x0F	; 15
 57c:	93 83       	std	Z+3, r25	; 0x03
 57e:	82 83       	std	Z+2, r24	; 0x02
				noteNow[R].freq = songToPlay[R][nNid[R]].freq;
 580:	68 81       	ld	r22, Y
 582:	79 81       	ldd	r23, Y+1	; 0x01
 584:	71 83       	std	Z+1, r23	; 0x01
 586:	60 83       	st	Z, r22

				Channel_Freq_Gen(R, noteNow[R].freq);
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	18 df       	rcall	.-464    	; 0x3bc <Channel_Freq_Gen>
 58c:	42 c0       	rjmp	.+132    	; 0x612 <__vector_21+0x138>

			} else if (mSecCnt[R] == noteNow[R].delay - SILENCE){
 58e:	e6 e0       	ldi	r30, 0x06	; 6
 590:	f0 e1       	ldi	r31, 0x10	; 16
 592:	20 81       	ld	r18, Z
 594:	31 81       	ldd	r19, Z+1	; 0x01
 596:	42 81       	ldd	r20, Z+2	; 0x02
 598:	53 81       	ldd	r21, Z+3	; 0x03
 59a:	64 81       	ldd	r22, Z+4	; 0x04
 59c:	75 81       	ldd	r23, Z+5	; 0x05
 59e:	86 81       	ldd	r24, Z+6	; 0x06
 5a0:	97 81       	ldd	r25, Z+7	; 0x07
 5a2:	a0 91 ea 0f 	lds	r26, 0x0FEA	; 0x800fea <__data_end+0x2>
 5a6:	b0 91 eb 0f 	lds	r27, 0x0FEB	; 0x800feb <__data_end+0x3>
 5aa:	fd 01       	movw	r30, r26
 5ac:	3a 97       	sbiw	r30, 0x0a	; 10
 5ae:	1f 01       	movw	r2, r30
 5b0:	ae 2e       	mov	r10, r30
 5b2:	b3 2c       	mov	r11, r3
 5b4:	c1 2c       	mov	r12, r1
 5b6:	d1 2c       	mov	r13, r1
 5b8:	e1 2c       	mov	r14, r1
 5ba:	f1 2c       	mov	r15, r1
 5bc:	00 e0       	ldi	r16, 0x00	; 0
 5be:	10 e0       	ldi	r17, 0x00	; 0
 5c0:	71 d2       	rcall	.+1250   	; 0xaa4 <__cmpdi2>
 5c2:	29 f4       	brne	.+10     	; 0x5ce <__vector_21+0xf4>
				Channel_Freq_Gen(R, S__);
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	f8 de       	rcall	.-528    	; 0x3bc <Channel_Freq_Gen>
 5cc:	22 c0       	rjmp	.+68     	; 0x612 <__vector_21+0x138>
			} else if (mSecCnt[R] == (noteNow[R].delay)){
 5ce:	e6 e0       	ldi	r30, 0x06	; 6
 5d0:	f0 e1       	ldi	r31, 0x10	; 16
 5d2:	20 81       	ld	r18, Z
 5d4:	31 81       	ldd	r19, Z+1	; 0x01
 5d6:	42 81       	ldd	r20, Z+2	; 0x02
 5d8:	53 81       	ldd	r21, Z+3	; 0x03
 5da:	64 81       	ldd	r22, Z+4	; 0x04
 5dc:	75 81       	ldd	r23, Z+5	; 0x05
 5de:	86 81       	ldd	r24, Z+6	; 0x06
 5e0:	97 81       	ldd	r25, Z+7	; 0x07
 5e2:	1d 01       	movw	r2, r26
 5e4:	aa 2e       	mov	r10, r26
 5e6:	b3 2c       	mov	r11, r3
 5e8:	c1 2c       	mov	r12, r1
 5ea:	d1 2c       	mov	r13, r1
 5ec:	e1 2c       	mov	r14, r1
 5ee:	f1 2c       	mov	r15, r1
 5f0:	00 e0       	ldi	r16, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	57 d2       	rcall	.+1198   	; 0xaa4 <__cmpdi2>
 5f6:	69 f4       	brne	.+26     	; 0x612 <__vector_21+0x138>
				mSecCnt[R] = 0;
 5f8:	10 82       	st	Z, r1
 5fa:	11 82       	std	Z+1, r1	; 0x01
 5fc:	12 82       	std	Z+2, r1	; 0x02
 5fe:	13 82       	std	Z+3, r1	; 0x03
 600:	14 82       	std	Z+4, r1	; 0x04
 602:	15 82       	std	Z+5, r1	; 0x05
 604:	16 82       	std	Z+6, r1	; 0x06
 606:	17 82       	std	Z+7, r1	; 0x07
				nNid[R]++;
 608:	21 96       	adiw	r28, 0x01	; 1
 60a:	d0 93 f5 0f 	sts	0x0FF5, r29	; 0x800ff5 <nNid+0x1>
 60e:	c0 93 f4 0f 	sts	0x0FF4, r28	; 0x800ff4 <nNid>
			}

			mSecCnt[R]++;
 612:	e6 e0       	ldi	r30, 0x06	; 6
 614:	f0 e1       	ldi	r31, 0x10	; 16
 616:	20 81       	ld	r18, Z
 618:	31 81       	ldd	r19, Z+1	; 0x01
 61a:	42 81       	ldd	r20, Z+2	; 0x02
 61c:	53 81       	ldd	r21, Z+3	; 0x03
 61e:	64 81       	ldd	r22, Z+4	; 0x04
 620:	75 81       	ldd	r23, Z+5	; 0x05
 622:	86 81       	ldd	r24, Z+6	; 0x06
 624:	97 81       	ldd	r25, Z+7	; 0x07
 626:	a1 e0       	ldi	r26, 0x01	; 1
 628:	31 d2       	rcall	.+1122   	; 0xa8c <__adddi3_s8>
 62a:	20 83       	st	Z, r18
 62c:	31 83       	std	Z+1, r19	; 0x01
 62e:	42 83       	std	Z+2, r20	; 0x02
 630:	53 83       	std	Z+3, r21	; 0x03
 632:	64 83       	std	Z+4, r22	; 0x04
 634:	75 83       	std	Z+5, r23	; 0x05
 636:	86 83       	std	Z+6, r24	; 0x06
 638:	97 83       	std	Z+7, r25	; 0x07
 63a:	09 c0       	rjmp	.+18     	; 0x64e <__vector_21+0x174>

		} else if (nNid[R] == lenOfSong[R]){
 63c:	c8 17       	cp	r28, r24
 63e:	d9 07       	cpc	r29, r25
			playing[R] = 0;
 640:	31 f4       	brne	.+12     	; 0x64e <__vector_21+0x174>
 642:	10 92 1e 10 	sts	0x101E, r1	; 0x80101e <playing>
			Channel_Freq_Gen(R, S__);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	b7 de       	rcall	.-658    	; 0x3bc <Channel_Freq_Gen>
		}
	}

	/* LADO IZQUIERDO */
	if(playing[L]) {
 64e:	80 91 1f 10 	lds	r24, 0x101F	; 0x80101f <playing+0x1>
 652:	88 23       	and	r24, r24
 654:	09 f4       	brne	.+2      	; 0x658 <__vector_21+0x17e>
 656:	90 c0       	rjmp	.+288    	; 0x778 <__vector_21+0x29e>
		if(nNid[L] < lenOfSong[L]){
 658:	c0 91 f6 0f 	lds	r28, 0x0FF6	; 0x800ff6 <nNid+0x2>
 65c:	d0 91 f7 0f 	lds	r29, 0x0FF7	; 0x800ff7 <nNid+0x3>
 660:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <lenOfSong+0x2>
 664:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <lenOfSong+0x3>
 668:	c8 17       	cp	r28, r24
 66a:	d9 07       	cpc	r29, r25
 66c:	08 f0       	brcs	.+2      	; 0x670 <__vector_21+0x196>
 66e:	7b c0       	rjmp	.+246    	; 0x766 <__vector_21+0x28c>
			if(mSecCnt[L] == 1){
 670:	e6 e0       	ldi	r30, 0x06	; 6
 672:	f0 e1       	ldi	r31, 0x10	; 16
 674:	20 85       	ldd	r18, Z+8	; 0x08
 676:	31 85       	ldd	r19, Z+9	; 0x09
 678:	42 85       	ldd	r20, Z+10	; 0x0a
 67a:	53 85       	ldd	r21, Z+11	; 0x0b
 67c:	64 85       	ldd	r22, Z+12	; 0x0c
 67e:	75 85       	ldd	r23, Z+13	; 0x0d
 680:	86 85       	ldd	r24, Z+14	; 0x0e
 682:	97 85       	ldd	r25, Z+15	; 0x0f
 684:	a1 e0       	ldi	r26, 0x01	; 1
 686:	17 d2       	rcall	.+1070   	; 0xab6 <__cmpdi2_s8>
 688:	b9 f4       	brne	.+46     	; 0x6b8 <__vector_21+0x1de>
				//noteNow[L].delay = pgm_read_word(&songToPlay[L][nNid[L]].delay);
				//noteNow[L].freq = pgm_read_word(&songToPlay[L][nNid[L]].freq);
				noteNow[L].delay = songToPlay[L][nNid[L]].delay;
 68a:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <songToPlay+0x2>
 68e:	90 91 03 10 	lds	r25, 0x1003	; 0x801003 <songToPlay+0x3>
 692:	cc 0f       	add	r28, r28
 694:	dd 1f       	adc	r29, r29
 696:	cc 0f       	add	r28, r28
 698:	dd 1f       	adc	r29, r29
 69a:	c8 0f       	add	r28, r24
 69c:	d9 1f       	adc	r29, r25
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	9b 81       	ldd	r25, Y+3	; 0x03
 6a2:	e8 ee       	ldi	r30, 0xE8	; 232
 6a4:	ff e0       	ldi	r31, 0x0F	; 15
 6a6:	97 83       	std	Z+7, r25	; 0x07
				noteNow[L].freq = songToPlay[L][nNid[L]].freq;
 6a8:	86 83       	std	Z+6, r24	; 0x06
 6aa:	68 81       	ld	r22, Y
 6ac:	79 81       	ldd	r23, Y+1	; 0x01
 6ae:	75 83       	std	Z+5, r23	; 0x05

				Channel_Freq_Gen(L, noteNow[L].freq);
 6b0:	64 83       	std	Z+4, r22	; 0x04
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	83 de       	rcall	.-762    	; 0x3bc <Channel_Freq_Gen>
 6b6:	42 c0       	rjmp	.+132    	; 0x73c <__vector_21+0x262>

			} else if (mSecCnt[L] == noteNow[L].delay - SILENCE){
 6b8:	e6 e0       	ldi	r30, 0x06	; 6
 6ba:	f0 e1       	ldi	r31, 0x10	; 16
 6bc:	20 85       	ldd	r18, Z+8	; 0x08
 6be:	31 85       	ldd	r19, Z+9	; 0x09
 6c0:	42 85       	ldd	r20, Z+10	; 0x0a
 6c2:	53 85       	ldd	r21, Z+11	; 0x0b
 6c4:	64 85       	ldd	r22, Z+12	; 0x0c
 6c6:	75 85       	ldd	r23, Z+13	; 0x0d
 6c8:	86 85       	ldd	r24, Z+14	; 0x0e
 6ca:	97 85       	ldd	r25, Z+15	; 0x0f
 6cc:	a0 91 ee 0f 	lds	r26, 0x0FEE	; 0x800fee <__data_end+0x6>
 6d0:	b0 91 ef 0f 	lds	r27, 0x0FEF	; 0x800fef <__data_end+0x7>
 6d4:	fd 01       	movw	r30, r26
 6d6:	3a 97       	sbiw	r30, 0x0a	; 10
 6d8:	1f 01       	movw	r2, r30
 6da:	ae 2e       	mov	r10, r30
 6dc:	b3 2c       	mov	r11, r3
 6de:	c1 2c       	mov	r12, r1
 6e0:	d1 2c       	mov	r13, r1
 6e2:	e1 2c       	mov	r14, r1
 6e4:	f1 2c       	mov	r15, r1
 6e6:	00 e0       	ldi	r16, 0x00	; 0
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	dc d1       	rcall	.+952    	; 0xaa4 <__cmpdi2>
				Channel_Freq_Gen(L, S__);
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <__vector_21+0x21e>
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	63 de       	rcall	.-826    	; 0x3bc <Channel_Freq_Gen>
 6f6:	22 c0       	rjmp	.+68     	; 0x73c <__vector_21+0x262>
			} else if (mSecCnt[L] == (noteNow[L].delay)){
 6f8:	e6 e0       	ldi	r30, 0x06	; 6
 6fa:	f0 e1       	ldi	r31, 0x10	; 16
 6fc:	20 85       	ldd	r18, Z+8	; 0x08
 6fe:	31 85       	ldd	r19, Z+9	; 0x09
 700:	42 85       	ldd	r20, Z+10	; 0x0a
 702:	53 85       	ldd	r21, Z+11	; 0x0b
 704:	64 85       	ldd	r22, Z+12	; 0x0c
 706:	75 85       	ldd	r23, Z+13	; 0x0d
 708:	86 85       	ldd	r24, Z+14	; 0x0e
 70a:	97 85       	ldd	r25, Z+15	; 0x0f
 70c:	1d 01       	movw	r2, r26
 70e:	aa 2e       	mov	r10, r26
 710:	b3 2c       	mov	r11, r3
 712:	c1 2c       	mov	r12, r1
 714:	d1 2c       	mov	r13, r1
 716:	e1 2c       	mov	r14, r1
 718:	f1 2c       	mov	r15, r1
 71a:	00 e0       	ldi	r16, 0x00	; 0
 71c:	10 e0       	ldi	r17, 0x00	; 0
 71e:	c2 d1       	rcall	.+900    	; 0xaa4 <__cmpdi2>
 720:	69 f4       	brne	.+26     	; 0x73c <__vector_21+0x262>
				mSecCnt[L] = 0;
 722:	10 86       	std	Z+8, r1	; 0x08
 724:	11 86       	std	Z+9, r1	; 0x09
 726:	12 86       	std	Z+10, r1	; 0x0a
 728:	13 86       	std	Z+11, r1	; 0x0b
 72a:	14 86       	std	Z+12, r1	; 0x0c
 72c:	15 86       	std	Z+13, r1	; 0x0d
 72e:	16 86       	std	Z+14, r1	; 0x0e
 730:	17 86       	std	Z+15, r1	; 0x0f
				nNid[L]++;
 732:	21 96       	adiw	r28, 0x01	; 1
 734:	d0 93 f7 0f 	sts	0x0FF7, r29	; 0x800ff7 <nNid+0x3>
 738:	c0 93 f6 0f 	sts	0x0FF6, r28	; 0x800ff6 <nNid+0x2>
			}	

			mSecCnt[L]++;
 73c:	e6 e0       	ldi	r30, 0x06	; 6
 73e:	f0 e1       	ldi	r31, 0x10	; 16
 740:	20 85       	ldd	r18, Z+8	; 0x08
 742:	31 85       	ldd	r19, Z+9	; 0x09
 744:	42 85       	ldd	r20, Z+10	; 0x0a
 746:	53 85       	ldd	r21, Z+11	; 0x0b
 748:	64 85       	ldd	r22, Z+12	; 0x0c
 74a:	75 85       	ldd	r23, Z+13	; 0x0d
 74c:	86 85       	ldd	r24, Z+14	; 0x0e
 74e:	97 85       	ldd	r25, Z+15	; 0x0f
 750:	a1 e0       	ldi	r26, 0x01	; 1
 752:	9c d1       	rcall	.+824    	; 0xa8c <__adddi3_s8>
 754:	20 87       	std	Z+8, r18	; 0x08
 756:	31 87       	std	Z+9, r19	; 0x09
 758:	42 87       	std	Z+10, r20	; 0x0a
 75a:	53 87       	std	Z+11, r21	; 0x0b
 75c:	64 87       	std	Z+12, r22	; 0x0c
 75e:	75 87       	std	Z+13, r23	; 0x0d
 760:	86 87       	std	Z+14, r24	; 0x0e
 762:	97 87       	std	Z+15, r25	; 0x0f
		
		} else if (nNid[L] == lenOfSong[L]){
 764:	09 c0       	rjmp	.+18     	; 0x778 <__vector_21+0x29e>
 766:	c8 17       	cp	r28, r24
 768:	d9 07       	cpc	r29, r25
			playing[L] = 0;
 76a:	31 f4       	brne	.+12     	; 0x778 <__vector_21+0x29e>
 76c:	10 92 1f 10 	sts	0x101F, r1	; 0x80101f <playing+0x1>
			Channel_Freq_Gen(L, S__);
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	22 de       	rcall	.-956    	; 0x3bc <Channel_Freq_Gen>
		}
	}

	/* LADO CENTRO */
	if(playing[C]) {
 778:	80 91 20 10 	lds	r24, 0x1020	; 0x801020 <playing+0x2>
 77c:	88 23       	and	r24, r24
 77e:	09 f4       	brne	.+2      	; 0x782 <__vector_21+0x2a8>
 780:	90 c0       	rjmp	.+288    	; 0x8a2 <__vector_21+0x3c8>
		if(nNid[C] < lenOfSong[C]){
 782:	c0 91 f8 0f 	lds	r28, 0x0FF8	; 0x800ff8 <nNid+0x4>
 786:	d0 91 f9 0f 	lds	r29, 0x0FF9	; 0x800ff9 <nNid+0x5>
 78a:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <lenOfSong+0x4>
 78e:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <lenOfSong+0x5>
 792:	c8 17       	cp	r28, r24
 794:	d9 07       	cpc	r29, r25
 796:	08 f0       	brcs	.+2      	; 0x79a <__vector_21+0x2c0>
			if(mSecCnt[C] == 1){
 798:	7b c0       	rjmp	.+246    	; 0x890 <__vector_21+0x3b6>
 79a:	e6 e0       	ldi	r30, 0x06	; 6
 79c:	f0 e1       	ldi	r31, 0x10	; 16
 79e:	20 89       	ldd	r18, Z+16	; 0x10
 7a0:	31 89       	ldd	r19, Z+17	; 0x11
 7a2:	42 89       	ldd	r20, Z+18	; 0x12
 7a4:	53 89       	ldd	r21, Z+19	; 0x13
 7a6:	64 89       	ldd	r22, Z+20	; 0x14
 7a8:	75 89       	ldd	r23, Z+21	; 0x15
 7aa:	86 89       	ldd	r24, Z+22	; 0x16
 7ac:	97 89       	ldd	r25, Z+23	; 0x17
 7ae:	a1 e0       	ldi	r26, 0x01	; 1
 7b0:	82 d1       	rcall	.+772    	; 0xab6 <__cmpdi2_s8>
 7b2:	b9 f4       	brne	.+46     	; 0x7e2 <__vector_21+0x308>
				//noteNow[C].delay = pgm_read_word(&songToPlay[C][nNid[C]].delay);
				//noteNow[C].freq = pgm_read_word(&songToPlay[C][nNid[C]].freq);
				noteNow[C].delay = songToPlay[C][nNid[C]].delay;
 7b4:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <songToPlay+0x4>
 7b8:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <songToPlay+0x5>
 7bc:	cc 0f       	add	r28, r28
 7be:	dd 1f       	adc	r29, r29
 7c0:	cc 0f       	add	r28, r28
 7c2:	dd 1f       	adc	r29, r29
 7c4:	c8 0f       	add	r28, r24
 7c6:	d9 1f       	adc	r29, r25
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	e8 ee       	ldi	r30, 0xE8	; 232
 7ce:	ff e0       	ldi	r31, 0x0F	; 15
 7d0:	93 87       	std	Z+11, r25	; 0x0b
				noteNow[C].freq = songToPlay[C][nNid[C]].freq;
 7d2:	82 87       	std	Z+10, r24	; 0x0a
 7d4:	68 81       	ld	r22, Y
 7d6:	79 81       	ldd	r23, Y+1	; 0x01
 7d8:	71 87       	std	Z+9, r23	; 0x09

				Channel_Freq_Gen(C, noteNow[C].freq);
 7da:	60 87       	std	Z+8, r22	; 0x08
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	ee dd       	rcall	.-1060   	; 0x3bc <Channel_Freq_Gen>
 7e0:	42 c0       	rjmp	.+132    	; 0x866 <__vector_21+0x38c>

			} else if (mSecCnt[C] == noteNow[C].delay - SILENCE){
 7e2:	e6 e0       	ldi	r30, 0x06	; 6
 7e4:	f0 e1       	ldi	r31, 0x10	; 16
 7e6:	20 89       	ldd	r18, Z+16	; 0x10
 7e8:	31 89       	ldd	r19, Z+17	; 0x11
 7ea:	42 89       	ldd	r20, Z+18	; 0x12
 7ec:	53 89       	ldd	r21, Z+19	; 0x13
 7ee:	64 89       	ldd	r22, Z+20	; 0x14
 7f0:	75 89       	ldd	r23, Z+21	; 0x15
 7f2:	86 89       	ldd	r24, Z+22	; 0x16
 7f4:	97 89       	ldd	r25, Z+23	; 0x17
 7f6:	a0 91 f2 0f 	lds	r26, 0x0FF2	; 0x800ff2 <__data_end+0xa>
 7fa:	b0 91 f3 0f 	lds	r27, 0x0FF3	; 0x800ff3 <__data_end+0xb>
 7fe:	fd 01       	movw	r30, r26
 800:	3a 97       	sbiw	r30, 0x0a	; 10
 802:	1f 01       	movw	r2, r30
 804:	ae 2e       	mov	r10, r30
 806:	b3 2c       	mov	r11, r3
 808:	c1 2c       	mov	r12, r1
 80a:	d1 2c       	mov	r13, r1
 80c:	e1 2c       	mov	r14, r1
 80e:	f1 2c       	mov	r15, r1
 810:	00 e0       	ldi	r16, 0x00	; 0
 812:	10 e0       	ldi	r17, 0x00	; 0
 814:	47 d1       	rcall	.+654    	; 0xaa4 <__cmpdi2>
				Channel_Freq_Gen(C, S__);
 816:	29 f4       	brne	.+10     	; 0x822 <__vector_21+0x348>
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	ce dd       	rcall	.-1124   	; 0x3bc <Channel_Freq_Gen>
 820:	22 c0       	rjmp	.+68     	; 0x866 <__vector_21+0x38c>
			} else if (mSecCnt[C] == (noteNow[C].delay)){
 822:	e6 e0       	ldi	r30, 0x06	; 6
 824:	f0 e1       	ldi	r31, 0x10	; 16
 826:	20 89       	ldd	r18, Z+16	; 0x10
 828:	31 89       	ldd	r19, Z+17	; 0x11
 82a:	42 89       	ldd	r20, Z+18	; 0x12
 82c:	53 89       	ldd	r21, Z+19	; 0x13
 82e:	64 89       	ldd	r22, Z+20	; 0x14
 830:	75 89       	ldd	r23, Z+21	; 0x15
 832:	86 89       	ldd	r24, Z+22	; 0x16
 834:	97 89       	ldd	r25, Z+23	; 0x17
 836:	1d 01       	movw	r2, r26
 838:	aa 2e       	mov	r10, r26
 83a:	b3 2c       	mov	r11, r3
 83c:	c1 2c       	mov	r12, r1
 83e:	d1 2c       	mov	r13, r1
 840:	e1 2c       	mov	r14, r1
 842:	f1 2c       	mov	r15, r1
 844:	00 e0       	ldi	r16, 0x00	; 0
 846:	10 e0       	ldi	r17, 0x00	; 0
 848:	2d d1       	rcall	.+602    	; 0xaa4 <__cmpdi2>
 84a:	69 f4       	brne	.+26     	; 0x866 <__vector_21+0x38c>
				mSecCnt[C] = 0;
 84c:	10 8a       	std	Z+16, r1	; 0x10
 84e:	11 8a       	std	Z+17, r1	; 0x11
 850:	12 8a       	std	Z+18, r1	; 0x12
 852:	13 8a       	std	Z+19, r1	; 0x13
 854:	14 8a       	std	Z+20, r1	; 0x14
 856:	15 8a       	std	Z+21, r1	; 0x15
 858:	16 8a       	std	Z+22, r1	; 0x16
				nNid[C]++;
 85a:	17 8a       	std	Z+23, r1	; 0x17
 85c:	21 96       	adiw	r28, 0x01	; 1
 85e:	d0 93 f9 0f 	sts	0x0FF9, r29	; 0x800ff9 <nNid+0x5>
 862:	c0 93 f8 0f 	sts	0x0FF8, r28	; 0x800ff8 <nNid+0x4>
			}	

			mSecCnt[C]++;
 866:	e6 e0       	ldi	r30, 0x06	; 6
 868:	f0 e1       	ldi	r31, 0x10	; 16
 86a:	20 89       	ldd	r18, Z+16	; 0x10
 86c:	31 89       	ldd	r19, Z+17	; 0x11
 86e:	42 89       	ldd	r20, Z+18	; 0x12
 870:	53 89       	ldd	r21, Z+19	; 0x13
 872:	64 89       	ldd	r22, Z+20	; 0x14
 874:	75 89       	ldd	r23, Z+21	; 0x15
 876:	86 89       	ldd	r24, Z+22	; 0x16
 878:	97 89       	ldd	r25, Z+23	; 0x17
 87a:	a1 e0       	ldi	r26, 0x01	; 1
 87c:	07 d1       	rcall	.+526    	; 0xa8c <__adddi3_s8>
 87e:	20 8b       	std	Z+16, r18	; 0x10
 880:	31 8b       	std	Z+17, r19	; 0x11
 882:	42 8b       	std	Z+18, r20	; 0x12
 884:	53 8b       	std	Z+19, r21	; 0x13
 886:	64 8b       	std	Z+20, r22	; 0x14
 888:	75 8b       	std	Z+21, r23	; 0x15
 88a:	86 8b       	std	Z+22, r24	; 0x16
 88c:	97 8b       	std	Z+23, r25	; 0x17
		
		} else if (nNid[C] == lenOfSong[C]){
 88e:	09 c0       	rjmp	.+18     	; 0x8a2 <__vector_21+0x3c8>
 890:	c8 17       	cp	r28, r24
 892:	d9 07       	cpc	r29, r25
			playing[C] = 0;
 894:	31 f4       	brne	.+12     	; 0x8a2 <__vector_21+0x3c8>
 896:	10 92 20 10 	sts	0x1020, r1	; 0x801020 <playing+0x2>
			Channel_Freq_Gen(C, S__);
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	8d dd       	rcall	.-1254   	; 0x3bc <Channel_Freq_Gen>
		}
	}

	if ( !(playing[R] | playing[L] | playing[C]) ){
 8a2:	ee e1       	ldi	r30, 0x1E	; 30
 8a4:	f0 e1       	ldi	r31, 0x10	; 16
 8a6:	20 81       	ld	r18, Z
 8a8:	81 81       	ldd	r24, Z+1	; 0x01
 8aa:	92 81       	ldd	r25, Z+2	; 0x02
 8ac:	82 2b       	or	r24, r18
 8ae:	89 2b       	or	r24, r25
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <__vector_21+0x3dc>
		TIMSK0 = 0x00;
 8b2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	}
}
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	7f 91       	pop	r23
 8c8:	6f 91       	pop	r22
 8ca:	5f 91       	pop	r21
 8cc:	4f 91       	pop	r20
 8ce:	3f 91       	pop	r19
 8d0:	2f 91       	pop	r18
 8d2:	1f 91       	pop	r17
 8d4:	0f 91       	pop	r16
 8d6:	ff 90       	pop	r15
 8d8:	ef 90       	pop	r14
 8da:	df 90       	pop	r13
 8dc:	cf 90       	pop	r12
 8de:	bf 90       	pop	r11
 8e0:	af 90       	pop	r10
 8e2:	9f 90       	pop	r9
 8e4:	8f 90       	pop	r8
 8e6:	7f 90       	pop	r7
 8e8:	6f 90       	pop	r6
 8ea:	5f 90       	pop	r5
 8ec:	4f 90       	pop	r4
 8ee:	3f 90       	pop	r3
 8f0:	2f 90       	pop	r2
 8f2:	0f 90       	pop	r0
 8f4:	0b be       	out	0x3b, r0	; 59
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <UART_init>:
            *(str +(tam - i)) = aux + '7';
        }

        number = (number - aux)/base;
    }
}
 900:	e0 ec       	ldi	r30, 0xC0	; 192
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	82 60       	ori	r24, 0x02	; 2
 908:	80 83       	st	Z, r24
 90a:	e1 ec       	ldi	r30, 0xC1	; 193
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	88 e1       	ldi	r24, 0x18	; 24
 910:	80 83       	st	Z, r24
 912:	86 e0       	ldi	r24, 0x06	; 6
 914:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 918:	80 81       	ld	r24, Z
 91a:	8b 7f       	andi	r24, 0xFB	; 251
 91c:	80 83       	st	Z, r24
 91e:	80 e1       	ldi	r24, 0x10	; 16
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 926:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 92a:	08 95       	ret

0000092c <UART_putchar>:
 92c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 930:	95 ff       	sbrs	r25, 5
 932:	fc cf       	rjmp	.-8      	; 0x92c <UART_putchar>
 934:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 938:	08 95       	ret

0000093a <UART_getchar>:
 93a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 93e:	88 23       	and	r24, r24
 940:	e4 f7       	brge	.-8      	; 0x93a <UART_getchar>
 942:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 946:	08 95       	ret

00000948 <UART_puts>:
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	ec 01       	movw	r28, r24
 94e:	02 c0       	rjmp	.+4      	; 0x954 <UART_puts+0xc>
 950:	21 96       	adiw	r28, 0x01	; 1
 952:	ec df       	rcall	.-40     	; 0x92c <UART_putchar>
 954:	88 81       	ld	r24, Y
 956:	81 11       	cpse	r24, r1
 958:	fb cf       	rjmp	.-10     	; 0x950 <UART_puts+0x8>
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	08 95       	ret

00000960 <UART_setText>:

void UART_setText(uint8_t tipo, uint8_t color)
{
	static char str[] = "\e[0;30m";
	str[5] = color + '0'; 
 960:	eb e1       	ldi	r30, 0x1B	; 27
 962:	f2 e0       	ldi	r31, 0x02	; 2
 964:	60 5d       	subi	r22, 0xD0	; 208
 966:	65 83       	std	Z+5, r22	; 0x05
    str[2] = tipo + '0'; 
 968:	80 5d       	subi	r24, 0xD0	; 208
 96a:	82 83       	std	Z+2, r24	; 0x02

    UART_puts(str);
 96c:	cf 01       	movw	r24, r30
 96e:	ec cf       	rjmp	.-40     	; 0x948 <UART_puts>
 970:	08 95       	ret

00000972 <UART_gotoxy>:

void UART_gotoxy(uint8_t x, uint8_t y)
{
	static char str[] = "\x1b[00;00H";
	  
    str[3] = '0' + y % 10;
 972:	e2 e1       	ldi	r30, 0x12	; 18
 974:	f2 e0       	ldi	r31, 0x02	; 2
 976:	9d ec       	ldi	r25, 0xCD	; 205
 978:	69 9f       	mul	r22, r25
 97a:	21 2d       	mov	r18, r1
 97c:	11 24       	eor	r1, r1
 97e:	26 95       	lsr	r18
 980:	26 95       	lsr	r18
 982:	26 95       	lsr	r18
 984:	42 2f       	mov	r20, r18
 986:	44 0f       	add	r20, r20
 988:	34 2f       	mov	r19, r20
 98a:	33 0f       	add	r19, r19
 98c:	33 0f       	add	r19, r19
 98e:	34 0f       	add	r19, r20
 990:	63 1b       	sub	r22, r19
 992:	60 5d       	subi	r22, 0xD0	; 208
 994:	63 83       	std	Z+3, r22	; 0x03
    y/=10;
    str[2] = '0' + y %10; 
 996:	29 9f       	mul	r18, r25
 998:	31 2d       	mov	r19, r1
 99a:	11 24       	eor	r1, r1
 99c:	36 95       	lsr	r19
 99e:	36 95       	lsr	r19
 9a0:	36 95       	lsr	r19
 9a2:	33 0f       	add	r19, r19
 9a4:	43 2f       	mov	r20, r19
 9a6:	44 0f       	add	r20, r20
 9a8:	44 0f       	add	r20, r20
 9aa:	34 0f       	add	r19, r20
 9ac:	23 1b       	sub	r18, r19
 9ae:	20 5d       	subi	r18, 0xD0	; 208
 9b0:	22 83       	std	Z+2, r18	; 0x02

    str[6] = '0' + x % 10;
 9b2:	89 9f       	mul	r24, r25
 9b4:	21 2d       	mov	r18, r1
 9b6:	11 24       	eor	r1, r1
 9b8:	26 95       	lsr	r18
 9ba:	26 95       	lsr	r18
 9bc:	26 95       	lsr	r18
 9be:	42 2f       	mov	r20, r18
 9c0:	44 0f       	add	r20, r20
 9c2:	34 2f       	mov	r19, r20
 9c4:	33 0f       	add	r19, r19
 9c6:	33 0f       	add	r19, r19
 9c8:	34 0f       	add	r19, r20
 9ca:	83 1b       	sub	r24, r19
 9cc:	80 5d       	subi	r24, 0xD0	; 208
 9ce:	86 83       	std	Z+6, r24	; 0x06
    x/=10;
    str[5] = '0' + x %10; 
 9d0:	29 9f       	mul	r18, r25
 9d2:	91 2d       	mov	r25, r1
 9d4:	11 24       	eor	r1, r1
 9d6:	96 95       	lsr	r25
 9d8:	96 95       	lsr	r25
 9da:	96 95       	lsr	r25
 9dc:	99 0f       	add	r25, r25
 9de:	89 2f       	mov	r24, r25
 9e0:	88 0f       	add	r24, r24
 9e2:	88 0f       	add	r24, r24
 9e4:	98 0f       	add	r25, r24
 9e6:	29 1b       	sub	r18, r25
 9e8:	20 5d       	subi	r18, 0xD0	; 208
 9ea:	25 83       	std	Z+5, r18	; 0x05

  UART_puts(str);
 9ec:	cf 01       	movw	r24, r30
 9ee:	ac cf       	rjmp	.-168    	; 0x948 <UART_puts>
 9f0:	08 95       	ret

000009f2 <UART_clrscr>:
}

void UART_clrscr(){
	UART_puts("\x1b[2J");
 9f2:	8e ed       	ldi	r24, 0xDE	; 222
 9f4:	9f e0       	ldi	r25, 0x0F	; 15
 9f6:	a8 df       	rcall	.-176    	; 0x948 <UART_puts>
    UART_puts("\x1b[H");
 9f8:	83 ee       	ldi	r24, 0xE3	; 227
 9fa:	9f e0       	ldi	r25, 0x0F	; 15
 9fc:	a5 cf       	rjmp	.-182    	; 0x948 <UART_puts>
 9fe:	08 95       	ret

00000a00 <__udivmodsi4>:
 a00:	a1 e2       	ldi	r26, 0x21	; 33
 a02:	1a 2e       	mov	r1, r26
 a04:	aa 1b       	sub	r26, r26
 a06:	bb 1b       	sub	r27, r27
 a08:	fd 01       	movw	r30, r26
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__udivmodsi4_ep>

00000a0c <__udivmodsi4_loop>:
 a0c:	aa 1f       	adc	r26, r26
 a0e:	bb 1f       	adc	r27, r27
 a10:	ee 1f       	adc	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	a2 17       	cp	r26, r18
 a16:	b3 07       	cpc	r27, r19
 a18:	e4 07       	cpc	r30, r20
 a1a:	f5 07       	cpc	r31, r21
 a1c:	20 f0       	brcs	.+8      	; 0xa26 <__udivmodsi4_ep>
 a1e:	a2 1b       	sub	r26, r18
 a20:	b3 0b       	sbc	r27, r19
 a22:	e4 0b       	sbc	r30, r20
 a24:	f5 0b       	sbc	r31, r21

00000a26 <__udivmodsi4_ep>:
 a26:	66 1f       	adc	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	1a 94       	dec	r1
 a30:	69 f7       	brne	.-38     	; 0xa0c <__udivmodsi4_loop>
 a32:	60 95       	com	r22
 a34:	70 95       	com	r23
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	9b 01       	movw	r18, r22
 a3c:	ac 01       	movw	r20, r24
 a3e:	bd 01       	movw	r22, r26
 a40:	cf 01       	movw	r24, r30
 a42:	08 95       	ret

00000a44 <__divmodsi4>:
 a44:	05 2e       	mov	r0, r21
 a46:	97 fb       	bst	r25, 7
 a48:	16 f4       	brtc	.+4      	; 0xa4e <__divmodsi4+0xa>
 a4a:	00 94       	com	r0
 a4c:	0f d0       	rcall	.+30     	; 0xa6c <__negsi2>
 a4e:	57 fd       	sbrc	r21, 7
 a50:	05 d0       	rcall	.+10     	; 0xa5c <__divmodsi4_neg2>
 a52:	d6 df       	rcall	.-84     	; 0xa00 <__udivmodsi4>
 a54:	07 fc       	sbrc	r0, 7
 a56:	02 d0       	rcall	.+4      	; 0xa5c <__divmodsi4_neg2>
 a58:	46 f4       	brtc	.+16     	; 0xa6a <__divmodsi4_exit>
 a5a:	08 c0       	rjmp	.+16     	; 0xa6c <__negsi2>

00000a5c <__divmodsi4_neg2>:
 a5c:	50 95       	com	r21
 a5e:	40 95       	com	r20
 a60:	30 95       	com	r19
 a62:	21 95       	neg	r18
 a64:	3f 4f       	sbci	r19, 0xFF	; 255
 a66:	4f 4f       	sbci	r20, 0xFF	; 255
 a68:	5f 4f       	sbci	r21, 0xFF	; 255

00000a6a <__divmodsi4_exit>:
 a6a:	08 95       	ret

00000a6c <__negsi2>:
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__tablejump2__>:
 a7c:	ee 0f       	add	r30, r30
 a7e:	ff 1f       	adc	r31, r31
 a80:	88 1f       	adc	r24, r24
 a82:	8b bf       	out	0x3b, r24	; 59
 a84:	07 90       	elpm	r0, Z+
 a86:	f6 91       	elpm	r31, Z
 a88:	e0 2d       	mov	r30, r0
 a8a:	19 94       	eijmp

00000a8c <__adddi3_s8>:
 a8c:	00 24       	eor	r0, r0
 a8e:	a7 fd       	sbrc	r26, 7
 a90:	00 94       	com	r0
 a92:	2a 0f       	add	r18, r26
 a94:	30 1d       	adc	r19, r0
 a96:	40 1d       	adc	r20, r0
 a98:	50 1d       	adc	r21, r0
 a9a:	60 1d       	adc	r22, r0
 a9c:	70 1d       	adc	r23, r0
 a9e:	80 1d       	adc	r24, r0
 aa0:	90 1d       	adc	r25, r0
 aa2:	08 95       	ret

00000aa4 <__cmpdi2>:
 aa4:	2a 15       	cp	r18, r10
 aa6:	3b 05       	cpc	r19, r11
 aa8:	4c 05       	cpc	r20, r12
 aaa:	5d 05       	cpc	r21, r13
 aac:	6e 05       	cpc	r22, r14
 aae:	7f 05       	cpc	r23, r15
 ab0:	80 07       	cpc	r24, r16
 ab2:	91 07       	cpc	r25, r17
 ab4:	08 95       	ret

00000ab6 <__cmpdi2_s8>:
 ab6:	00 24       	eor	r0, r0
 ab8:	a7 fd       	sbrc	r26, 7
 aba:	00 94       	com	r0
 abc:	2a 17       	cp	r18, r26
 abe:	30 05       	cpc	r19, r0
 ac0:	40 05       	cpc	r20, r0
 ac2:	50 05       	cpc	r21, r0
 ac4:	60 05       	cpc	r22, r0
 ac6:	70 05       	cpc	r23, r0
 ac8:	80 05       	cpc	r24, r0
 aca:	90 05       	cpc	r25, r0
 acc:	08 95       	ret

00000ace <_exit>:
 ace:	f8 94       	cli

00000ad0 <__stop_program>:
 ad0:	ff cf       	rjmp	.-2      	; 0xad0 <__stop_program>
